// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider              = "prisma-json-schema-generator"
  includeRequiredFields = "true"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" // SQLite will use a file for the database
}

model Song {
  disk       Disk    @relation(fields: [diskId], references: [id])
  track      String
  name       String
  id         Int     @id @default(autoincrement())
  length     String?
  artist     Artist  @relation(fields: [artistName], references: [name])
  artistName String
  diskName   String?
  diskId     Int
}

model Disk {
  name           String
  id             Int      @id
  artistName     String
  artist         Artist   @relation(fields: [artistName], references: [name])
  barcode        String?  @unique
  year           Int
  genre          String?
  format         String?
  style          String?
  Song           Song[]
  location       String
  case           Boolean? @default(true)
  img            String?  @default("/download.jpg")
  checkedOutBy   User?    @relation(fields: [checkedOutById], references: [id], name: "UserCheckedOut")
  checkedOutById Int? // Foreign key to User model
}



model Artist {
  id   Int     @id
  name String  @unique
  img  String?
  Song Song[]
  Disk Disk[]
}

model Label {
  id   Int    @id
  name String
}


model User {
  checkedOutDisks Disk[] @relation("UserCheckedOut")
id Int @id @default(autoincrement())
email String @unique
username String
password_hash String
// email_verified Int @default(0)
// totp_key Bytes?
// recovery_code Bytes
sessions Session[]
salt  String
// emailVerifications EmailVerificationRequest[]
passwordResets PasswordResetSession[]
@@index([email])
role String @default("admin")

}

model Session {
id String @id
user_id Int
expires_at DateTime
// two_factor_verified Int @default(0)

user User @relation(fields: [user_id], references: [id])
}

// model EmailVerificationRequest {
// id String @id
// user_id Int
// email String
// code String
// expires_at Int

// user User @relation(fields: [user_id], references: [id])
// }

model PasswordResetSession {
id String @id
user_id Int
email String
code String
expires_at Int
email_verified Int @default(0)
two_factor_verified Int @default(0)

user User @relation(fields: [user_id], references: [id])
}

// Indexes